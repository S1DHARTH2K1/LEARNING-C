                              Chapter 1: The Heart of C â€“ Pointers
                              ------------------------------------

Everything in system programming revolves around memory. Pointers are our way of working with memory directly

What is a Pointer?
A pointer is a variable whose value is the memory address of another variable.
In C 
# It doesn't hold the value 10; it holds the location in memory where 10 is stored.

The Two Operators: & and *
1. The "Address-of" Operator: &
  When you put & in front of a variable name, it gives you the variable's memory address.
2. The "Dereference" Operator: *
  This operator does the opposite. When you have an address (stored in a pointer), you use * to go to that address and get the value stored there.
--------------------------------------------------------
In PROGRAM 1(hello.c)[Testing address-of operator'&' and Dereference operator '*']
the output was like
--- Let's inspect our variables ---
The value of the variable 'num' is: 42
The memory address of 'num' is: 0x7ffc1234abcd

--- Let's inspect our pointer ---
The value of the pointer 'ptr' is: 0x7ffc1234abcd
The value AT THE ADDRESS the pointer is pointing to is: 42
----------------------------------------------------------
In PROGRAM 2(hello.c)[Testing my own way]
The output was
value of n is 16
address of n is 0000002A881FFD44
value of p is 0000002A881FFD44
value at address p is 16
----------------------------------------------------------

In PROGRAM 3(TASK 1(hello.c))
the output was 
value of price is 99.95
address of price is 000000FF1F3FFE74
-----------------------------------------------------------

                              Chapter 2: Why POINTERS are so USEFUL[FUNCTIONS]
                              ------------------------------------------------
? Why do we need POINTERS?
-> One of the use for pointers is to allow a function to modify a variable that was declared in a different function, By default, when you pass a variable to a function in C, you are only passing a copy of its value. This is called "pass-by-value". The original variable is not affected.

In chapter2.c lets take a look at how it actually works,
In PROGRAM 1
we before and after calling a function my_score is same thats because we used pass by value
but 
In PROGRAM 2
we used pass by reference, so we actually looking into the address of my_score and taking the value. So before and after calling th function we got different answer.
